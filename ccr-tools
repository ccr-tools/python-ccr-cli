#!/usr/bin/python3

version = '0.0.1'

import argparse
import ccr


def parse_args():

    parser = argparse.ArgumentParser(prog="ccr-tools",
                                     description="A tool to interact with the Chakra Community Repository.",
                                     usage="%(prog)s [options] <pkgname1> <pkgname2> ...",
                                     epilog="  examples:\tVote for packages 'shake' and 'bfilter' :\n"
                                            "\t\t    ccr-tools --vote shake bfilter\n\n"
                                            "\t\tAdopt package 'shake' and set the notify flag :\n"
                                            "\t\t    ccr-tools -an shake\n\n"
                                            "\t\tStore authentication information :\n"
                                            "\t\t    ccr-tools --authenticate\n"
                                            "\t\t(username, password and type of storage will be asked)\n"
                                            "\t\tTo create a new account just go to:\n"
                                            "\t\t" + ccr.CCR_BASE + "account.php",
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--version', action='version',
                        version="%(prog)s " + version + " (http://ccr-tools.github.io)")
    parser.add_argument('-c', '--check-vote', action='store_true', help="check for voted packages")
    parser.add_argument('-v', '--vote', action='store_true', help="vote for packages")
    parser.add_argument('-V', '--unvote', action='store_true', help="unvote packages")
    parser.add_argument('-f', '--flag', action='store_true', help="flag packages as out of date")
    parser.add_argument('-F', '--unflag', action='store_true', help="unflag packages as out of date")
    parser.add_argument('-n', '--notify', action='store_true', help="set the notify flag on packages")
    parser.add_argument('-N', '--unnotify', action='store_true', help="unset the notify flag on packages")
    parser.add_argument('-a', '--adopt', action='store_true', help="adopt orphaned packages")
    parser.add_argument('-D', '--disown', action='store_true', help="disown packages")
    parser.add_argument('-s', '--submit', action='store_true', help="submit new packages")
    parser.add_argument('-C', '--category', action='store_true', help="set the category for new packages")
    parser.add_argument('-d', '--delete', action='store_true', help="delete packages")
    parser.add_argument('-l', '--list-categories', action='store_true', help="list all valid categories")
    parser.add_argument('-S', '--status', action='store_true', help="list the status of owned packages")
    parser.add_argument('-m', '--maintainer', action='store_true', help="list all packages by maintainer")
    parser.add_argument('-A', '--authenticate', action='store_true',
                        help="store authentication information in a file, an SQLite database or in KWallet")
    parser.add_argument('--reset', action='store_true', help="reset authentication information")

    parser.add_argument('pkgs', metavar='<pkgname>', nargs='+')
    return parser.parse_args()

    #todo the idea with -sC was that you could do `-s <pkg> -C` to list the categories, then hit up and complete the category
    #parser.add_argument('-sC', action='store_true', help="list all valid categories")



if __name__ == '__main__':

    args = vars(parse_args())
    print(args)